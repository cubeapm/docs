"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[196],{3575:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"instrumentation/python-django-gunicorn","title":"Python Django Gunicorn","description":"Prerequisites","source":"@site/docs/instrumentation/python-django-gunicorn.md","sourceDirName":"instrumentation","slug":"/instrumentation/python-django-gunicorn","permalink":"/instrumentation/python-django-gunicorn","draft":false,"unlisted":false,"editUrl":"https://github.com/cubeapm/docs/docs/docs/instrumentation/python-django-gunicorn.md","tags":[],"version":"current","frontMatter":{"id":"python-django-gunicorn","title":"Python Django Gunicorn","slug":"/instrumentation/python-django-gunicorn"},"sidebar":"tutorialSidebar","previous":{"title":"PHP Slim","permalink":"/instrumentation/php-slim"},"next":{"title":"Python Django uWSGI","permalink":"/instrumentation/python-django-uwsgi"}}');var r=t(4848),s=t(8453);const i={id:"python-django-gunicorn",title:"Python Django Gunicorn",slug:"/instrumentation/python-django-gunicorn"},l=void 0,a={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function p(n){const e={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(e.p,{children:"Python 3"}),"\n",(0,r.jsx)(e.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Install dependencies:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"pip install opentelemetry-distro opentelemetry-exporter-otlp-proto-http\nopentelemetry-bootstrap -a install\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Modify the gunicorn config file as follows:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:'title="gunicorn.conf.py"',children:'# highlight-start\nimport os\nfrom opentelemetry import trace\nfrom opentelemetry.semconv.resource import ResourceAttributes\nfrom opentelemetry.sdk.trace import TracerProvider, Resource\nfrom opentelemetry.sdk.trace.export import (\n   BatchSpanProcessor,\n   ConsoleSpanExporter,\n   SimpleSpanProcessor,\n)\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom socket import gethostname\n# highlight-end\n\nbind = "127.0.0.1:8000"\n\n# Sample Worker processes\nworkers = 4\nworker_class = "sync"\nworker_connections = 1000\ntimeout = 30\nkeepalive = 2\n\n# Sample logging\nerrorlog = "-"\nloglevel = "info"\naccesslog = "-"\naccess_log_format = (\n   \'%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s"\'\n)\n\n# highlight-start\ndef post_fork(server, worker):\n   server.log.info("Worker spawned (pid: %s)", worker.pid)\n\n   provider = TracerProvider(resource=Resource({\n      ResourceAttributes.SERVICE_NAME: os.environ[\'OTEL_SERVICE_NAME\'],\n      ResourceAttributes.HOST_NAME: gethostname() or \'UNSET\',\n   }))\n   if os.getenv(\'OTEL_LOG_LEVEL\', \'\') == \'debug\':\n      processor = SimpleSpanProcessor(ConsoleSpanExporter())\n   else:\n      processor = BatchSpanProcessor(OTLPSpanExporter())\n   provider.add_span_processor(processor)\n   trace.set_tracer_provider(provider)\n# highlight-end\n'})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:["Add the highlighted lines below to your project's ",(0,r.jsx)(e.code,{children:"wsgi.py"})," file:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",metastring:'title="wsgi.py"',children:"import os\nfrom django.core.wsgi import get_wsgi_application\n# highlight-next-line\nfrom opentelemetry.instrumentation.django import DjangoInstrumentor\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\n# highlight-start\nDjangoInstrumentor().instrument()\n# Additional instrumentations can be enabled by\n# following the docs for respective instrumentations at\n# https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation\n#\n# A working example with multiple instrumentations is available at\n# https://github.com/cubeapm/sample_app_python_django_gunicorn\n# highlight-end\n\napplication = get_wsgi_application()\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:"Modify the application run command as follows:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"DJANGO_SETTINGS_MODULE=<django_app_name>.settings \\\nOTEL_METRICS_EXPORTER=none \\\nOTEL_LOGS_EXPORTER=none \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4318/v1/traces \\\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip \\\nOTEL_SERVICE_NAME=<app_name> \\\ngunicorn mysite.wsgi -c gunicorn.conf.py\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(e.p,{children:"The following can be used for debugging:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"OTEL_LOG_LEVEL=debug\n"})}),"\n",(0,r.jsx)(e.p,{children:"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-shell",children:"telnet <ip_address_of_cubeapm_server> 4318\n"})})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(p,{...n})}):p(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>l});var o=t(6540);const r={},s=o.createContext(r);function i(n){const e=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:i(n.components),o.createElement(s.Provider,{value:e},n.children)}}}]);