"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[691],{4958:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=t(4848),s=t(8453);const o={id:"nodeJs",title:"NodeJS",slug:"/instrumentation/nodejs"},i=void 0,a={id:"instrumentation/nodeJs",title:"NodeJS",description:"Installation",source:"@site/docs/instrumentation/nodeJS.md",sourceDirName:"instrumentation",slug:"/instrumentation/nodejs",permalink:"/instrumentation/nodejs",draft:!1,unlisted:!1,editUrl:"https://github.com/cubeapm/docs/docs/docs/instrumentation/nodeJS.md",tags:[],version:"current",frontMatter:{id:"nodeJs",title:"NodeJS",slug:"/instrumentation/nodejs"},sidebar:"tutorialSidebar",previous:{title:"Java",permalink:"/instrumentation/java"},next:{title:"PHP Slim",permalink:"/instrumentation/php-slim"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Sample App",id:"sample-app",level:3},{value:"Capture Exception StackTraces (optional)",id:"capture-exception-stacktraces-optional",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Install dependencies"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"npm install --save @opentelemetry/auto-instrumentations-node\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create a file ",(0,r.jsx)(n.code,{children:"tracing.js"})," in your project directory, with the following content:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",metastring:'title="tracing.js"',children:'"use strict";\nconst process = require("process");\nconst {\n  diag,\n  DiagConsoleLogger,\n  DiagLogLevel,\n} = require("@opentelemetry/api");\nconst opentelemetry = require("@opentelemetry/sdk-node");\nconst {\n  getNodeAutoInstrumentations,\n} = require("@opentelemetry/auto-instrumentations-node");\nconst {\n  OTLPTraceExporter,\n} = require("@opentelemetry/exporter-trace-otlp-grpc");\n\nif (process.env.OTEL_LOG_LEVEL === "debug") {\n  diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.INFO);\n}\n\nconst exporterOptions = {\n  // concurrencyLimit: 1,\n};\nconst traceExporter =\n  process.env.OTEL_LOG_LEVEL === "debug"\n    ? new opentelemetry.tracing.ConsoleSpanExporter()\n    : new OTLPTraceExporter(exporterOptions);\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter,\n  instrumentations: getNodeAutoInstrumentations({\n    "@opentelemetry/instrumentation-fs": {\n      enabled: false,\n    },\n  }),\n});\n\n// initialize the SDK and register with the OpenTelemetry API\n// this enables the API to record telemetry\nsdk.start();\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Modify the application run command as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:'OTEL_METRICS_EXPORTER=none \\\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4317 \\\nOTEL_SERVICE_NAME=<app_name> \\\nNODE_OPTIONS="--require ./tracing.js" \\\nnode app.js\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"sample-app",children:"Sample App"}),"\n",(0,r.jsxs)(n.p,{children:["A working example with multiple instrumentations is available at ",(0,r.jsx)(n.a,{href:"https://github.com/cubeapm/sample_app_nodejs_express",children:"https://github.com/cubeapm/sample_app_nodejs_express"})]}),"\n",(0,r.jsx)(n.h2,{id:"capture-exception-stacktraces-optional",children:"Capture Exception StackTraces (optional)"}),"\n",(0,r.jsx)(n.p,{children:"CubeAPM shows stacktraces for any exceptions that occur in your application. However, if you are using the Express framework, you need to add the following code to your Express error handler to capture the stacktraces:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'import express, { Express, ErrorRequestHandler } from "express";\n// highlight-next-line\nimport { trace } from "@opentelemetry/api";\n\nconst app: Express = express();\n\napp.get("/", (req, res) => {\n  throw new Error("Test throw error!");\n});\n\nconst errorHandler: ErrorRequestHandler = (err, req, res, next) => {\n  // highlight-start\n  const span = trace.getActiveSpan();\n  if (span) {\n    span.recordException(err);\n  }\n  // highlight-end\n\n  // pass the error to the next middleware\n  // you can do any custom error handling here\n  next(err);\n};\n\napp.use(errorHandler);\n\napp.listen(8080);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.p,{children:"The following can be used for debugging:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"OTEL_LOG_LEVEL=debug\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"telnet <ip_address_of_cubeapm_server> 4317\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);