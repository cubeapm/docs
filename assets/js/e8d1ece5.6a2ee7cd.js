"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3771],{4899:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"instrumentation/opentelemetry/go-net-http","title":"Go Net/HTTP","description":"Prerequisites","source":"@site/docs/instrumentation/opentelemetry/go-net-http.md","sourceDirName":"instrumentation/opentelemetry","slug":"/instrumentation/opentelemetry/go-net-http","permalink":"/instrumentation/opentelemetry/go-net-http","draft":false,"unlisted":false,"editUrl":"https://github.com/cubeapm/docs/docs/docs/instrumentation/opentelemetry/go-net-http.md","tags":[],"version":"current","frontMatter":{"id":"go-net-http","title":"Go Net/HTTP","slug":"/instrumentation/opentelemetry/go-net-http"},"sidebar":"tutorialSidebar","previous":{"title":"Go Gin","permalink":"/instrumentation/opentelemetry/go-gin"},"next":{"title":"Java","permalink":"/instrumentation/opentelemetry/java"}}');var o=n(4848),i=n(8453);const s={id:"go-net-http",title:"Go Net/HTTP",slug:"/instrumentation/opentelemetry/go-net-http"},a=void 0,l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Sample App",id:"sample-app",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(t.p,{children:"Go 1.23+"}),"\n",(0,o.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Create a file ",(0,o.jsx)(t.code,{children:"otel.go"})," in your project directory with the following content:"]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"otel.go"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:' package main\n\n import (\n     "context"\n     "errors"\n     "os"\n     "time"\n\n     "go.opentelemetry.io/contrib/instrumentation/host"\n     "go.opentelemetry.io/contrib/instrumentation/runtime"\n     "go.opentelemetry.io/otel"\n     "go.opentelemetry.io/otel/attribute"\n     "go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp"\n     "go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp"\n     "go.opentelemetry.io/otel/exporters/stdout/stdoutmetric"\n     "go.opentelemetry.io/otel/exporters/stdout/stdouttrace"\n     "go.opentelemetry.io/otel/propagation"\n     "go.opentelemetry.io/otel/sdk/metric"\n     "go.opentelemetry.io/otel/sdk/resource"\n     "go.opentelemetry.io/otel/sdk/trace"\n     semconv "go.opentelemetry.io/otel/semconv/v1.34.0"\n )\n\n // setupOTelSDK bootstraps the OpenTelemetry pipeline.\n // If it does not return an error, make sure to call shutdown for proper cleanup.\n func setupOTelSDK(ctx context.Context) (shutdown func(context.Context) error, err error) {\n     var shutdownFuncs []func(context.Context) error\n\n     // shutdown calls cleanup functions registered via shutdownFuncs.\n     // The errors from the calls are joined.\n     // Each registered cleanup will be invoked once.\n     shutdown = func(ctx context.Context) error {\n         var err error\n         for _, fn := range shutdownFuncs {\n             err = errors.Join(err, fn(ctx))\n         }\n         shutdownFuncs = nil\n         return err\n     }\n\n     // handleErr calls shutdown for cleanup and makes sure that all errors are returned.\n     handleErr := func(inErr error) {\n         err = errors.Join(inErr, shutdown(ctx))\n     }\n\n     // Set up propagator.\n     prop := newPropagator()\n     otel.SetTextMapPropagator(prop)\n\n     hostname, _ := os.Hostname()\n     res := resource.Default()\n     res = resource.NewWithAttributes(\n         res.SchemaURL(),\n         append(res.Attributes(), attribute.KeyValue{\n             Key:   semconv.HostNameKey,\n             Value: attribute.StringValue(hostname),\n         })...,\n     )\n\n     // Set up trace provider.\n     tracerProvider, err := newTraceProvider(ctx, res)\n     if err != nil {\n         handleErr(err)\n         return\n     }\n     shutdownFuncs = append(shutdownFuncs, tracerProvider.Shutdown)\n     otel.SetTracerProvider(tracerProvider)\n\n     // Set up meter provider.\n     meterProvider, err := newMeterProvider(ctx, res)\n     if err != nil {\n         handleErr(err)\n         return\n     }\n     shutdownFuncs = append(shutdownFuncs, meterProvider.Shutdown)\n     otel.SetMeterProvider(meterProvider)\n\n     err = host.Start()\n     if err != nil {\n         handleErr(err)\n         return\n     }\n     // enable deprecated runtime metrics to get garbage collection details\n     os.Setenv("OTEL_GO_X_DEPRECATED_RUNTIME_METRICS", "true")\n     err = runtime.Start(runtime.WithMeterProvider(meterProvider))\n     if err != nil {\n         handleErr(err)\n         return\n     }\n\n     return\n }\n\n func newPropagator() propagation.TextMapPropagator {\n     return propagation.NewCompositeTextMapPropagator(\n         propagation.TraceContext{},\n         propagation.Baggage{},\n     )\n }\n\n func newTraceProvider(ctx context.Context, res *resource.Resource) (*trace.TracerProvider, error) {\n     var traceExporter trace.SpanExporter\n     var err error\n     if os.Getenv("OTEL_LOG_LEVEL") == "debug" {\n         traceExporter, err = stdouttrace.New(\n             stdouttrace.WithPrettyPrint(),\n         )\n     } else {\n         traceExporter, err = otlptracehttp.New(ctx)\n     }\n     if err != nil {\n         return nil, err\n     }\n\n     traceProvider := trace.NewTracerProvider(\n         trace.WithResource(res),\n         trace.WithBatcher(traceExporter),\n     )\n     return traceProvider, nil\n }\n\n func newMeterProvider(ctx context.Context, res *resource.Resource) (*metric.MeterProvider, error) {\n     var metricExporter metric.Exporter\n     var err error\n     var opts []metric.PeriodicReaderOption\n     if os.Getenv("OTEL_LOG_LEVEL") == "debug" {\n         metricExporter, err = stdoutmetric.New(\n             stdoutmetric.WithPrettyPrint(),\n         )\n         // Default is 1m. Set to 10s to get output faster.\n         opts = append(opts, metric.WithInterval(10*time.Second))\n     } else {\n         metricExporter, err = otlpmetrichttp.New(ctx)\n     }\n     if err != nil {\n         return nil, err\n     }\n\n     meterProvider := metric.NewMeterProvider(\n         metric.WithResource(res),\n         metric.WithReader(\n             metric.NewPeriodicReader(metricExporter, opts...),\n         ),\n     )\n     return meterProvider, nil\n }\n'})})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Add the highlighted lines below to your project's ",(0,o.jsx)(t.code,{children:"main.go"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\n# highlight-start\nimport "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"\n# highlight-end\n\nfunc main() {\n     ......\n \t# highlight-start\n    // Handle SIGINT (CTRL+C)\n    ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)\n    defer stop()\n\n    // Set up OpenTelemetry.\n    otelShutdown, err := setupOTelSDK(ctx)\n    if err != nil {\n        return err\n    }\n    // Handle shutdown properly so nothing leaks.\n    defer func() {\n        err = errors.Join(err, otelShutdown(context.Background()))\n    }()\n    # highlight-end\n}\n\nfunc newHTTPHandler() http.Handler {    \n    mux := http.NewServeMux()\n\n    handleFunc := func(pattern string, handlerFunc func(http.ResponseWriter, *http.Request)) {\n \t   # highlight-start\n        // Configure the "http.route" for the HTTP instrumentation.\n        handler := otelhttp.WithRouteTag(pattern, http.HandlerFunc(handlerFunc))\n        // Add HTTP instrumentation for the whole server.\n        handler = otelhttp.Newhandler(handler, pattern)\n \t   # highlight-end\n        mux.Handle(pattern, handler)\n    }\n\n    // Register handlers.\n    handleFunc("/", indexFunc)\n    return mux\n}\n'})}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["For more information, refer to the ",(0,o.jsx)(t.a,{href:"https://opentelemetry.io/docs/languages/go/getting-started/",children:"OpenTelemetry Go documentation"}),"."]})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Modify the application run command as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"OTEL_LOGS_EXPORTER=none \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4318/v1/traces \\\nOTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://<ip_address_of_cubeapm_server>:3130/api/metrics/v1/save/otlp \\\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip \\\nOTEL_SERVICE_NAME=<app_name> \\\ngo run main.go\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"sample-app",children:"Sample App"}),"\n",(0,o.jsxs)(t.p,{children:["A working example with multiple instrumentations is available at ",(0,o.jsx)(t.a,{href:"https://github.com/cubeapm/sample_app_go_net_http/tree/otel",children:"https://github.com/cubeapm/sample_app_go_net_http/tree/otel"})]}),"\n",(0,o.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(t.p,{children:"The following can be used for debugging:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"# print traces and metrics on console\nOTEL_LOG_LEVEL=debug\n"})}),"\n",(0,o.jsx)(t.p,{children:"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"telnet <ip_address_of_cubeapm_server> 4318\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);