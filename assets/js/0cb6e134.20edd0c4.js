"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7547],{8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},9395:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"instrumentation/opentelemetry/nodeJs-nest","title":"NodeJS Nest","description":"Installation","source":"@site/docs/instrumentation/opentelemetry/nodeJS-nest.md","sourceDirName":"instrumentation/opentelemetry","slug":"/instrumentation/opentelemetry/nodejs-nest","permalink":"/instrumentation/opentelemetry/nodejs-nest","draft":false,"unlisted":false,"editUrl":"https://github.com/cubeapm/docs/docs/docs/instrumentation/opentelemetry/nodeJS-nest.md","tags":[],"version":"current","frontMatter":{"id":"nodeJs-nest","title":"NodeJS Nest","slug":"/instrumentation/opentelemetry/nodejs-nest"},"sidebar":"tutorialSidebar","previous":{"title":"NodeJS Express","permalink":"/instrumentation/opentelemetry/nodejs-express"},"next":{"title":"PHP Laravel","permalink":"/instrumentation/opentelemetry/php-laravel"}}');var o=t(4848),r=t(8453);const i={id:"nodeJs-nest",title:"NodeJS Nest",slug:"/instrumentation/opentelemetry/nodejs-nest"},l=void 0,a={},c=[{value:"Installation",id:"installation",level:2},{value:"Sample App",id:"sample-app",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Install dependencies"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"npm install --save @opentelemetry/auto-instrumentations-node\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Create a file ",(0,o.jsx)(n.code,{children:"tracing.js"})," in your project directory, with the following content:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",metastring:'title="tracing.js"',children:'"use strict";\nconst process = require("process");\nconst {\n  diag,\n  DiagConsoleLogger,\n  DiagLogLevel,\n} = require("@opentelemetry/api");\nconst opentelemetry = require("@opentelemetry/sdk-node");\nconst {\n  getNodeAutoInstrumentations,\n} = require("@opentelemetry/auto-instrumentations-node");\nconst {\n  OTLPTraceExporter,\n} = require("@opentelemetry/exporter-trace-otlp-proto");\n\nif (process.env.OTEL_LOG_LEVEL === "debug") {\n  diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.INFO);\n}\n\nconst exporterOptions = {\n  // concurrencyLimit: 1,\n};\nconst traceExporter =\n  process.env.OTEL_LOG_LEVEL === "debug"\n    ? new opentelemetry.tracing.ConsoleSpanExporter()\n    : new OTLPTraceExporter(exporterOptions);\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter,\n  instrumentations: getNodeAutoInstrumentations({\n    "@opentelemetry/instrumentation-fs": {\n      enabled: false,\n    },\n  }),\n});\n\n// initialize the SDK and register with the OpenTelemetry API\n// this enables the API to record telemetry\nsdk.start();\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Modify the application run command as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'OTEL_METRICS_EXPORTER=otlp \\\nOTEL_LOGS_EXPORTER=none \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4318/v1/traces \\\nOTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://<ip_address_of_cubeapm_server>:3130/api/metrics/v1/save/otlp \\\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip \\\nOTEL_SERVICE_NAME=<app_name> \\\nNODE_OPTIONS="--require ./tracing.js" \\\nnpm run start\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["If the application is running in PM2 cluster mode, then setting NODE_OPTIONS does not work. In this case, add ",(0,o.jsx)(n.code,{children:"require('./tracing.js');"})," as the first line in your application code."]})}),"\n",(0,o.jsx)(n.h3,{id:"sample-app",children:"Sample App"}),"\n",(0,o.jsxs)(n.p,{children:["A working example with multiple instrumentations is available at ",(0,o.jsx)(n.a,{href:"https://github.com/cubeapm/sample_app_nodejs_nest/tree/otel",children:"https://github.com/cubeapm/sample_app_nodejs_nest/tree/otel"})]}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.p,{children:"The following can be used for debugging:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"# print traces on console\nOTEL_LOG_LEVEL=debug\n# print metrics on console\nOTEL_METRICS_EXPORTER=console\n"})}),"\n",(0,o.jsx)(n.p,{children:"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"telnet <ip_address_of_cubeapm_server> 4318\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);