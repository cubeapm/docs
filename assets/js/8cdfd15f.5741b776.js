"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3274],{2328:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"instrumentation/opentelemetry/python-fastapi-uvicorn","title":"Python FastAPI Uvicorn","description":"Prerequisites","source":"@site/docs/instrumentation/opentelemetry/python-fastapi-uvicorn.md","sourceDirName":"instrumentation/opentelemetry","slug":"/instrumentation/opentelemetry/python-fastapi-uvicorn","permalink":"/instrumentation/opentelemetry/python-fastapi-uvicorn","draft":false,"unlisted":false,"editUrl":"https://github.com/cubeapm/docs/docs/docs/instrumentation/opentelemetry/python-fastapi-uvicorn.md","tags":[],"version":"current","frontMatter":{"id":"python-fastapi-uvicorn","title":"Python FastAPI Uvicorn","slug":"/instrumentation/opentelemetry/python-fastapi-uvicorn"},"sidebar":"tutorialSidebar","previous":{"title":"Python Django uWSGI","permalink":"/instrumentation/opentelemetry/python-django-uwsgi"},"next":{"title":"Python Flask Gunicorn","permalink":"/instrumentation/opentelemetry/python-flask-gunicorn"}}');var o=n(4848),i=n(8453);const s={id:"python-fastapi-uvicorn",title:"Python FastAPI Uvicorn",slug:"/instrumentation/opentelemetry/python-fastapi-uvicorn"},a=void 0,p={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Sample Application",id:"sample-application",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(t.p,{children:"Python 3"}),"\n",(0,o.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Install dependencies:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"pip install opentelemetry-distro opentelemetry-exporter-otlp-proto-http opentelemetry-instrumentation-fastapi opentelemetry-instrumentation-system-metrics \nopentelemetry-bootstrap -a install\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Create a file ",(0,o.jsx)(t.code,{children:"tracing.py"})," in your project directory, with the following content:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",metastring:'title="tracing.py"',children:" import os\n from opentelemetry import trace\n from opentelemetry.sdk import resources\n from opentelemetry.sdk.trace import TracerProvider\n from opentelemetry.sdk.trace.export import (\n     BatchSpanProcessor,\n     ConsoleSpanExporter,\n     SimpleSpanProcessor,\n )\n from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\n from opentelemetry import metrics\n from opentelemetry.sdk.metrics import MeterProvider\n from opentelemetry.sdk.metrics.export import (\n     ConsoleMetricExporter,\n     PeriodicExportingMetricReader,\n )\n from opentelemetry.exporter.otlp.proto.http.metric_exporter import OTLPMetricExporter\n from opentelemetry.instrumentation.system_metrics import SystemMetricsInstrumentor\n from socket import gethostname\n\n\n def init_tracing():\n     resource = resources.Resource.create({\n        resources.HOST_NAME: gethostname() or 'UNSET',\n     })\n\n     if os.getenv('OTEL_LOG_LEVEL', '') == 'debug':\n        trace_processor = SimpleSpanProcessor(ConsoleSpanExporter())\n     else:\n        trace_processor = BatchSpanProcessor(OTLPSpanExporter())\n     trace_provider = TracerProvider(\n        resource=resource,\n        active_span_processor=trace_processor\n     )\n     trace.set_tracer_provider(trace_provider)\n\n     if os.getenv('OTEL_LOG_LEVEL', '') == 'debug':\n        metric_exporter = ConsoleMetricExporter()\n     else:\n        metric_exporter = OTLPMetricExporter()\n     metric_reader = PeriodicExportingMetricReader(exporter=metric_exporter)\n     meter_provider = MeterProvider(\n        resource=resource,\n        metric_readers=[metric_reader]\n     )\n     metrics.set_meter_provider(meter_provider)\n     SystemMetricsInstrumentor().instrument()\n\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Add the highlighted lines below to your project's main file:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",metastring:'title="main.py"',children:"from fastapi import FastAPI\n# highlight-start\nfrom tracing import init_tracing\nfrom opentelemetry.instrumentation.fastapi import FastAPIInstrumentor\n# highlight-end\n\napp = FastAPI()\n\n# highlight-start\ninit_tracing()\nFastAPIInstrumentor.instrument_app(app)\n# Additional instrumentations can be enabled by\n# following the docs for respective instrumentations at\n# https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation\n#\n# A working example with multiple instrumentations is available at\n# https://github.com/cubeapm/sample_app_python_fastapi_uvicorn/tree/otel\n# highlight-end\n\n@app.route('/roll/<number>')\ndef roll(number):\n   return number\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Modify the application run command as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"OTEL_LOGS_EXPORTER=none \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4318/v1/traces \\\nOTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://<ip_address_of_cubeapm_server>:3130/api/metrics/v1/save/otlp \\\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip \\\nOTEL_SERVICE_NAME=<app_name> \\\nuvicorn main:app --host=0.0.0.0 --port=8000 --workers=4\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"sample-application",children:"Sample Application"}),"\n",(0,o.jsxs)(t.p,{children:["A working example is available at ",(0,o.jsx)(t.a,{href:"https://github.com/cubeapm/sample_app_python_fastapi_uvicorn/tree/otel",children:"https://github.com/cubeapm/sample_app_python_fastapi_uvicorn/tree/otel"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(t.p,{children:"The following can be used for debugging:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"OTEL_LOG_LEVEL=debug\n"})}),"\n",(0,o.jsx)(t.p,{children:"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"telnet <ip_address_of_cubeapm_server> 4318\n"})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);