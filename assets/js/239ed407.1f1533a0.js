"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[810],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>E});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,E=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(E,i(i({ref:t},c),{},{components:n})):r.createElement(E,i({ref:t},c))}));function E(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2772:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(4137));const o={id:"nodeJs",title:"NodeJS",slug:"/instrumentation/nodejs"},i=void 0,s={unversionedId:"instrumentation/nodeJs",id:"instrumentation/nodeJs",title:"NodeJS",description:"Installation",source:"@site/docs/instrumentation/nodeJS.md",sourceDirName:"instrumentation",slug:"/instrumentation/nodejs",permalink:"/instrumentation/nodejs",draft:!1,editUrl:"https://github.com/cubeapm/docs/docs/docs/instrumentation/nodeJS.md",tags:[],version:"current",frontMatter:{id:"nodeJs",title:"NodeJS",slug:"/instrumentation/nodejs"},sidebar:"tutorialSidebar",previous:{title:"Java",permalink:"/instrumentation/java"},next:{title:"PHP Slim",permalink:"/instrumentation/php-slim"}},l={},p=[{value:"Installation",id:"installation",level:2},{value:"Capture Exception StackTraces (optional)",id:"capture-exception-stacktraces-optional",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Install dependencies"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --save @opentelemetry/auto-instrumentations-node@^0.38.0\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add the following environment variables:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'OTEL_METRICS_EXPORTER=none\nOTEL_TRACES_EXPORTER=otlp\nOTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4317\nOTEL_SERVICE_NAME=<app_name>\nNODE_OPTIONS="--require @opentelemetry/auto-instrumentations-node/register"\n')),(0,a.kt)("p",{parentName:"li"},"For example, if the run command is ",(0,a.kt)("inlineCode",{parentName:"p"},"node index.js"),", then change it to:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'OTEL_METRICS_EXPORTER=none \\\nOTEL_TRACES_EXPORTER=otlp \\\nOTEL_EXPORTER_OTLP_TRACES_PROTOCOL=grpc \\\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4317 \\\nOTEL_SERVICE_NAME=<app_name> \\\nNODE_OPTIONS="--require @opentelemetry/auto-instrumentations-node/register" \\\nnode index.js\n')))),(0,a.kt)("h2",{id:"capture-exception-stacktraces-optional"},"Capture Exception StackTraces (optional)"),(0,a.kt)("p",null,"CubeAPM shows stacktraces for any exceptions that occur in your application. However, if you are using the Express framework, you need to add the following code to your Express error handler to capture the stacktraces:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import express, { Express, ErrorRequestHandler } from "express";\n// highlight-next-line\nimport { trace, SpanStatusCode } from "@opentelemetry/api";\n\nconst app: Express = express();\n\napp.get("/", (req, res) => {\n  throw new Error("Test throw error!");\n});\n\nconst errorHandler: ErrorRequestHandler = (err, req, res, next) => {\n  // highlight-start\n  const span = trace.getActiveSpan();\n  if (span) {\n    span.recordException(err);\n  }\n  // highlight-end\n\n  // pass the error to the next middleware\n  // you can do any custom error handling here\n  next(err);\n};\n\napp.use(errorHandler);\n\napp.listen(8080);\n')),(0,a.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,a.kt)("p",null,"The following can be used for debugging:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"OTEL_LOG_LEVEL=debug\n")),(0,a.kt)("p",null,"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"telnet <ip_address_of_cubeapm_server> 4317\n")))}d.isMDXComponent=!0}}]);