"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[510],{4937:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>p});var r=t(4848),o=t(8453);const s={id:"python-flask-uwsgi",title:"Python Flask uWSGI",slug:"/instrumentation/python-flask-uwsgi"},i=void 0,a={id:"instrumentation/python-flask-uwsgi",title:"Python Flask uWSGI",description:"Prerequisites",source:"@site/docs/instrumentation/python-flask-uwsgi.md",sourceDirName:"instrumentation",slug:"/instrumentation/python-flask-uwsgi",permalink:"/instrumentation/python-flask-uwsgi",draft:!1,unlisted:!1,editUrl:"https://github.com/cubeapm/docs/docs/docs/instrumentation/python-flask-uwsgi.md",tags:[],version:"current",frontMatter:{id:"python-flask-uwsgi",title:"Python Flask uWSGI",slug:"/instrumentation/python-flask-uwsgi"},sidebar:"tutorialSidebar",previous:{title:"Python Flask Gunicorn",permalink:"/instrumentation/python-flask-gunicorn"},next:{title:"Python Sanic",permalink:"/instrumentation/python-sanic"}},l={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Capture Exception StackTraces",id:"capture-exception-stacktraces",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Python 3"}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Install dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"pip install opentelemetry-distro opentelemetry-exporter-otlp-proto-http opentelemetry-instrumentation-flask\nopentelemetry-bootstrap -a install\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Add the highlighted lines below to your project's main file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",metastring:'title="app.py"',children:"from flask import Flask\n# highlight-start\nfrom uwsgidecorators import postfork\nimport os\nfrom opentelemetry import trace\nfrom opentelemetry.semconv.resource import ResourceAttributes\nfrom opentelemetry.sdk.trace import TracerProvider, Resource\nfrom opentelemetry.sdk.trace.export import (\n   BatchSpanProcessor,\n   ConsoleSpanExporter,\n   SimpleSpanProcessor,\n)\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.instrumentation.flask import FlaskInstrumentor\nfrom socket import gethostname\n# highlight-end\n\napp = Flask(__name__)\n# highlight-start\nFlaskInstrumentor().instrument_app(app)\n# Additional instrumentations can be enabled by\n# following the docs for respective instrumentations at\n# https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation\n#\n# A working example with multiple instrumentations is available at\n# https://github.com/cubeapm/sample_app_python_flask_uwsgi\n\n@postfork\ndef init_tracing():\n   provider = TracerProvider(resource=Resource({\n      ResourceAttributes.SERVICE_NAME: os.environ['OTEL_SERVICE_NAME'],\n      ResourceAttributes.HOST_NAME: gethostname() or 'UNSET',\n   }))\n   if os.getenv('OTEL_LOG_LEVEL', '') == 'debug':\n      processor = SimpleSpanProcessor(ConsoleSpanExporter())\n   else:\n      processor = BatchSpanProcessor(OTLPSpanExporter())\n   provider.add_span_processor(processor)\n   trace.set_tracer_provider(provider)\n\n# Note: If uWSGI's `lazy-apps = true` option is used for running the\n# app, then `@postfork` above will not work and `init_tracing` needs\n# to be called by uncommenting the below line.\n#init_tracing()\n# highlight-end\n\n@app.route('/roll/<number>')\ndef roll(number):\n   return number\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Modify the application run command as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"OTEL_METRICS_EXPORTER=none \\\nOTEL_LOGS_EXPORTER=none \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4318/v1/traces \\\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip \\\nOTEL_SERVICE_NAME=<app_name> \\\nuwsgi --http :8000 --wsgi-file app.py --callable app --master --enable-threads --need-app\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"capture-exception-stacktraces",children:"Capture Exception StackTraces"}),"\n",(0,r.jsxs)(n.p,{children:["Any exceptions occuring in your application will be captured and shown on CubeAPM. However, if you are using Flask's global exception handling (e.g., via ",(0,r.jsx)(n.code,{children:"app.register_error_handler()"}),"), then you may need to take some extra steps as below to ensure that the exceptions get captured."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from opentelemetry import trace\nfrom opentelemetry.trace import Status, StatusCode\nfrom werkzeug.exceptions import HTTPException\n\ndef handle_unhandled_exception(ex):\n   # highlight-start\n   current_span = trace.get_current_span()\n   if current_span:\n      if not isinstance(ex, HTTPException) or ex.code >= 500:\n         current_span.record_exception(ex)\n         current_span.set_status(Status(StatusCode.ERROR))\n   # highlight-end\n\n   # your exception handling logic below\n   print(ex)\n   return ''\n\n\napp.register_error_handler(Exception, handle_unhandled_exception)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.p,{children:"The following can be used for debugging:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"OTEL_LOG_LEVEL=debug\n"})}),"\n",(0,r.jsx)(n.p,{children:"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"telnet <ip_address_of_cubeapm_server> 4318\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);