"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9400],{1532:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"instrumentation/opentelemetry/python-django-gunicorn","title":"Python Django Gunicorn","description":"Prerequisites","source":"@site/docs/instrumentation/opentelemetry/python-django-gunicorn.md","sourceDirName":"instrumentation/opentelemetry","slug":"/instrumentation/opentelemetry/python-django-gunicorn","permalink":"/instrumentation/opentelemetry/python-django-gunicorn","draft":false,"unlisted":false,"editUrl":"https://github.com/cubeapm/docs/docs/docs/instrumentation/opentelemetry/python-django-gunicorn.md","tags":[],"version":"current","frontMatter":{"id":"python-django-gunicorn","title":"Python Django Gunicorn","slug":"/instrumentation/opentelemetry/python-django-gunicorn"},"sidebar":"tutorialSidebar","previous":{"title":"PHP Slim","permalink":"/instrumentation/opentelemetry/php-slim"},"next":{"title":"Python Django uWSGI","permalink":"/instrumentation/opentelemetry/python-django-uwsgi"}}');var o=t(4848),i=t(8453);const s={id:"python-django-gunicorn",title:"Python Django Gunicorn",slug:"/instrumentation/opentelemetry/python-django-gunicorn"},l=void 0,p={},a=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Sample Application",id:"sample-application",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.p,{children:"Python 3"}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Install dependencies:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"pip install opentelemetry-distro opentelemetry-exporter-otlp-proto-http opentelemetry-instrumentation-system-metrics\nopentelemetry-bootstrap -a install\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Modify the gunicorn config file as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="gunicorn.conf.py"',children:'# highlight-start\nimport os\nfrom opentelemetry import trace\nfrom opentelemetry.sdk import resources\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import (\n   BatchSpanProcessor,\n   ConsoleSpanExporter,\n   SimpleSpanProcessor,\n)\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry import metrics\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.metrics.export import (\n   ConsoleMetricExporter,\n   PeriodicExportingMetricReader,\n)\nfrom opentelemetry.exporter.otlp.proto.http.metric_exporter import OTLPMetricExporter\nfrom opentelemetry.instrumentation.system_metrics import SystemMetricsInstrumentor\nfrom socket import gethostname\n# highlight-end\n\nbind = "127.0.0.1:8000"\n\n# Sample Worker processes\nworkers = 4\nworker_class = "sync"\nworker_connections = 1000\ntimeout = 30\nkeepalive = 2\n\n# Sample logging\nerrorlog = "-"\nloglevel = "info"\naccesslog = "-"\naccess_log_format = (\n   \'%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s"\'\n)\n\n# highlight-start\ndef post_fork(server, worker):\n   server.log.info("Worker spawned (pid: %s)", worker.pid)\n\n   resource = resources.Resource.create({\n      resources.HOST_NAME: gethostname() or \'UNSET\',\n   })\n\n   if os.getenv(\'OTEL_LOG_LEVEL\', \'\') == \'debug\':\n      trace_processor = SimpleSpanProcessor(ConsoleSpanExporter())\n   else:\n      trace_processor = BatchSpanProcessor(OTLPSpanExporter())\n   trace_provider = TracerProvider(\n      resource=resource,\n      active_span_processor=trace_processor\n   )\n   trace.set_tracer_provider(trace_provider)\n\n   if os.getenv(\'OTEL_LOG_LEVEL\', \'\') == \'debug\':\n      metric_exporter = ConsoleMetricExporter()\n   else:\n      metric_exporter = OTLPMetricExporter()\n   metric_reader = PeriodicExportingMetricReader(exporter=metric_exporter)\n   meter_provider = MeterProvider(\n      resource=resource,\n      metric_readers=[metric_reader]\n   )\n   metrics.set_meter_provider(meter_provider)\n   SystemMetricsInstrumentor().instrument()\n# highlight-end\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Add the highlighted lines below to your project's ",(0,o.jsx)(n.code,{children:"wsgi.py"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="wsgi.py"',children:"import os\nfrom django.core.wsgi import get_wsgi_application\n# highlight-next-line\nfrom opentelemetry.instrumentation.django import DjangoInstrumentor\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\n# highlight-start\nDjangoInstrumentor().instrument()\n# Additional instrumentations can be enabled by\n# following the docs for respective instrumentations at\n# https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation\n#\n# A working example with multiple instrumentations is available at\n# https://github.com/cubeapm/sample_app_python_django_gunicorn/tree/otel\n# highlight-end\n\napplication = get_wsgi_application()\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Modify the application run command as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"DJANGO_SETTINGS_MODULE=<django_app_name>.settings \\\nOTEL_LOGS_EXPORTER=none \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4318/v1/traces \\\nOTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://<ip_address_of_cubeapm_server>:3130/api/metrics/v1/save/otlp \\\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip \\\nOTEL_SERVICE_NAME=<app_name> \\\ngunicorn mysite.wsgi -c gunicorn.conf.py\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"sample-application",children:"Sample Application"}),"\n",(0,o.jsxs)(n.p,{children:["A working example is available at ",(0,o.jsx)(n.a,{href:"https://github.com/cubeapm/sample_app_python_django_gunicorn/tree/otel",children:"https://github.com/cubeapm/sample_app_python_django_gunicorn/tree/otel"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(n.p,{children:"The following can be used for debugging:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"OTEL_LOG_LEVEL=debug\n"})}),"\n",(0,o.jsx)(n.p,{children:"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"telnet <ip_address_of_cubeapm_server> 4318\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var r=t(6540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);