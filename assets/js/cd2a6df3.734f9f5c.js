"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3670],{6515:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"instrumentation/opentelemetry/python-flask-uwsgi","title":"Python Flask uWSGI","description":"Prerequisites","source":"@site/docs/instrumentation/opentelemetry/python-flask-uwsgi.md","sourceDirName":"instrumentation/opentelemetry","slug":"/instrumentation/opentelemetry/python-flask-uwsgi","permalink":"/instrumentation/opentelemetry/python-flask-uwsgi","draft":false,"unlisted":false,"editUrl":"https://github.com/cubeapm/docs/docs/docs/instrumentation/opentelemetry/python-flask-uwsgi.md","tags":[],"version":"current","frontMatter":{"id":"python-flask-uwsgi","title":"Python Flask uWSGI","slug":"/instrumentation/opentelemetry/python-flask-uwsgi"},"sidebar":"tutorialSidebar","previous":{"title":"Python Flask Gunicorn","permalink":"/instrumentation/opentelemetry/python-flask-gunicorn"},"next":{"title":"Python Sanic","permalink":"/instrumentation/opentelemetry/python-sanic"}}');var o=n(4848),s=n(8453);const i={id:"python-flask-uwsgi",title:"Python Flask uWSGI",slug:"/instrumentation/opentelemetry/python-flask-uwsgi"},a=void 0,p={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Capture Exception StackTraces",id:"capture-exception-stacktraces",level:2},{value:"Sample Application",id:"sample-application",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function c(e){const t={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(t.p,{children:"Python 3"}),"\n",(0,o.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Install dependencies:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"pip install opentelemetry-distro opentelemetry-exporter-otlp-proto-http opentelemetry-instrumentation-flask opentelemetry-instrumentation-system-metrics\nopentelemetry-bootstrap -a install\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Add the highlighted lines below to your project's main file:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",metastring:'title="app.py"',children:"from flask import Flask\n# highlight-start\nfrom uwsgidecorators import postfork\nimport os\nfrom opentelemetry import trace\nfrom opentelemetry.sdk import resources\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import (\n   BatchSpanProcessor,\n   ConsoleSpanExporter,\n   SimpleSpanProcessor,\n)\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry import metrics\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.metrics.export import (\n   ConsoleMetricExporter,\n   PeriodicExportingMetricReader,\n)\nfrom opentelemetry.exporter.otlp.proto.http.metric_exporter import OTLPMetricExporter\nfrom opentelemetry.instrumentation.system_metrics import SystemMetricsInstrumentor\nfrom opentelemetry.instrumentation.flask import FlaskInstrumentor\nfrom socket import gethostname\n# highlight-end\n\napp = Flask(__name__)\n# highlight-start\nFlaskInstrumentor().instrument_app(app)\n# Additional instrumentations can be enabled by\n# following the docs for respective instrumentations at\n# https://github.com/open-telemetry/opentelemetry-python-contrib/tree/main/instrumentation\n#\n# A working example with multiple instrumentations is available at\n# https://github.com/cubeapm/sample_app_python_flask_uwsgi/tree/otel\n\n@postfork\ndef init_tracing():\n   resource = resources.Resource.create({\n      resources.HOST_NAME: gethostname() or 'UNSET',\n   })\n\n   if os.getenv('OTEL_LOG_LEVEL', '') == 'debug':\n      trace_processor = SimpleSpanProcessor(ConsoleSpanExporter())\n   else:\n      trace_processor = BatchSpanProcessor(OTLPSpanExporter())\n   trace_provider = TracerProvider(\n      resource=resource,\n      active_span_processor=trace_processor\n   )\n   trace.set_tracer_provider(trace_provider)\n\n   if os.getenv('OTEL_LOG_LEVEL', '') == 'debug':\n      metric_exporter = ConsoleMetricExporter()\n   else:\n      metric_exporter = OTLPMetricExporter()\n   metric_reader = PeriodicExportingMetricReader(exporter=metric_exporter)\n   meter_provider = MeterProvider(\n      resource=resource,\n      metric_readers=[metric_reader]\n   )\n   metrics.set_meter_provider(meter_provider)\n   SystemMetricsInstrumentor().instrument()\n\n# Note: If uWSGI's `lazy-apps = true` option is used for running the\n# app, then `@postfork` above will not work and `init_tracing` needs\n# to be called by uncommenting the below line.\n#init_tracing()\n# highlight-end\n\n@app.route('/roll/<number>')\ndef roll(number):\n   return number\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Modify the application run command as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"OTEL_LOGS_EXPORTER=none \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4318/v1/traces \\\nOTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://<ip_address_of_cubeapm_server>:3130/api/metrics/v1/save/otlp \\\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip \\\nOTEL_SERVICE_NAME=<app_name> \\\nuwsgi --http :8000 --wsgi-file app.py --callable app --master --enable-threads --need-app\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"capture-exception-stacktraces",children:"Capture Exception StackTraces"}),"\n",(0,o.jsxs)(t.p,{children:["Any exceptions occuring in your application will be captured and shown on CubeAPM. However, if you are using Flask's global exception handling (e.g., via ",(0,o.jsx)(t.code,{children:"app.register_error_handler()"}),"), then you may need to take some extra steps as below to ensure that the exceptions get captured."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:"from opentelemetry import trace\nfrom opentelemetry.trace import Status, StatusCode\nfrom werkzeug.exceptions import HTTPException\n\ndef handle_unhandled_exception(ex):\n   # highlight-start\n   current_span = trace.get_current_span()\n   if current_span:\n      if not isinstance(ex, HTTPException) or ex.code >= 500:\n         current_span.record_exception(ex)\n         current_span.set_status(Status(StatusCode.ERROR))\n   # highlight-end\n\n   # your exception handling logic below\n   print(ex)\n   return ''\n\n\napp.register_error_handler(Exception, handle_unhandled_exception)\n"})}),"\n",(0,o.jsx)(t.h2,{id:"sample-application",children:"Sample Application"}),"\n",(0,o.jsxs)(t.p,{children:["A working example is available at ",(0,o.jsx)(t.a,{href:"https://github.com/cubeapm/sample_app_python_flask_uwsgi/tree/otel",children:"https://github.com/cubeapm/sample_app_python_flask_uwsgi/tree/otel"}),"."]}),"\n",(0,o.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(t.p,{children:"The following can be used for debugging:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"OTEL_LOG_LEVEL=debug\n"})}),"\n",(0,o.jsx)(t.p,{children:"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"telnet <ip_address_of_cubeapm_server> 4318\n"})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);