"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[429],{4137:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,p=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=o,k=c["".concat(l,".").concat(d)]||c[d]||u[d]||p;return n?r.createElement(k,a(a({ref:t},m),{},{components:n})):r.createElement(k,a({ref:t},m))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var p=n.length,a=new Array(p);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,a[1]=i;for(var s=2;s<p;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6647:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>p,metadata:()=>i,toc:()=>s});var r=n(7462),o=(n(7294),n(4137));const p={id:"php-slim",title:"PHP Slim",slug:"/instrumentation/php-slim"},a=void 0,i={unversionedId:"instrumentation/php-slim",id:"instrumentation/php-slim",title:"PHP Slim",description:"Prerequisites",source:"@site/docs/instrumentation/php-slim.md",sourceDirName:"instrumentation",slug:"/instrumentation/php-slim",permalink:"/instrumentation/php-slim",draft:!1,editUrl:"https://github.com/cubeapm/docs/docs/docs/instrumentation/php-slim.md",tags:[],version:"current",frontMatter:{id:"php-slim",title:"PHP Slim",slug:"/instrumentation/php-slim"},sidebar:"tutorialSidebar",previous:{title:"NodeJS",permalink:"/instrumentation/nodejs"},next:{title:"Python Django",permalink:"/instrumentation/python-django"}},l={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}],m={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"PHP 8.0+"),(0,o.kt)("li",{parentName:"ol"},"composer")),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add ",(0,o.kt)("inlineCode",{parentName:"p"},'"minimum-stability": "beta"')," to your composer.json to allow it to pick correct versions of OpenTelemetry packages. The composer.json will look like this:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},'{\n    "require": {\n        ...\n    },\n    "minimum-stability": "beta",\n    "config": {\n        ...\n    }\n}\n'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install the required dependencies:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install the required tools:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"sudo apt-get install php-pear php-dev libtool \\\nmake gcc autoconf libz-dev zip\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Build the extensions (can take upto 15 minutes):"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"pecl install grpc\npecl install opentelemetry-beta\npecl install protobuf\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add the extensions to your php.ini file:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"[opentelemetry]\nextension=grpc.so\nextension=opentelemetry.so\nextension=protobuf.so\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Verify that the extensions are installed and enabled (the following command should list all\nthe extensions we just installed:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"php -m | grep -P 'grpc|opentelemetry|protobuf'\n")),(0,o.kt)("p",{parentName:"li"},"Or"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"php -m | grep -E 'grpc|opentelemetry|protobuf'\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add additional dependencies to your application:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"composer config allow-plugins.php-http/discovery true\ncomposer require php-http/guzzle7-adapter \\\nopen-telemetry/sdk \\\nopen-telemetry/opentelemetry-auto-slim \\\ngrpc/grpc \\\nopen-telemetry/exporter-otlp \\\nopen-telemetry/transport-grpc \\\nopen-telemetry/opentelemetry-auto-psr15 \\\nopen-telemetry/opentelemetry-auto-psr18\n"))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Modify the application run command as follows:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"OTEL_PHP_AUTOLOAD_ENABLED=true \\\nOTEL_SERVICE_NAME=<app_name> \\\nOTEL_METRICS_EXPORTER=none \\\nOTEL_TRACES_EXPORTER=otlp \\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4317/opentelemetry.proto.collector.trace.v1.TraceService/Export \\\nOTEL_PROPAGATORS=baggage,tracecontext \\\nphp myapp.php\n")))),(0,o.kt)("p",null,"Data should now be visible in your CubeAPM account."),(0,o.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,o.kt)("p",null,"Traces exporter can be changed from ",(0,o.kt)("inlineCode",{parentName:"p"},"otlp")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"console")," to output traces on console."),(0,o.kt)("p",null,"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"telnet <ip_address_of_cubeapm_server> 4317\n")))}u.isMDXComponent=!0}}]);