"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5373],{4088:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=t(4848),r=t(8453);const i={sidebar_position:2,slug:"/infra-monitoring/bare-metal-virtual-machine"},s="Bare Metal / Virtual Machine",l={id:"infra-monitoring/baremetal",title:"Bare Metal / Virtual Machine",description:"The recommended setup for infra monitoring with CubeAPM is to use OpenTelemetry (OTel) Collector for collecting the metrics from host machines and sending them to CubeAPM. CubeAPM then provides visualization and alerting on the collected metrics.",source:"@site/docs/infra-monitoring/2_baremetal.md",sourceDirName:"infra-monitoring",slug:"/infra-monitoring/bare-metal-virtual-machine",permalink:"/infra-monitoring/bare-metal-virtual-machine",draft:!1,unlisted:!1,editUrl:"https://github.com/cubeapm/docs/docs/docs/infra-monitoring/2_baremetal.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/infra-monitoring/bare-metal-virtual-machine"},sidebar:"tutorialSidebar",previous:{title:"Infra Monitoring",permalink:"/infra-monitoring"},next:{title:"Kubernetes",permalink:"/infra-monitoring/kubernetes"}},a={},c=[{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"bare-metal--virtual-machine",children:"Bare Metal / Virtual Machine"}),"\n",(0,o.jsx)(n.p,{children:"The recommended setup for infra monitoring with CubeAPM is to use OpenTelemetry (OTel) Collector for collecting the metrics from host machines and sending them to CubeAPM. CubeAPM then provides visualization and alerting on the collected metrics."}),"\n",(0,o.jsxs)(n.p,{children:["OTel Collector can be installed on Linux, Windows, and Mac. Pre-built packages for popular package managers (apt, rpm, etc.) are available at ",(0,o.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-collector-releases/releases",children:"https://github.com/open-telemetry/opentelemetry-collector-releases/releases"}),". Visit the link, look for ",(0,o.jsx)(n.code,{children:"Assets"})," for the latest release, and click on ",(0,o.jsx)(n.code,{children:"Show all xxx assets"})," link at the bottom of the assets list. Then look at links starting with ",(0,o.jsx)(n.code,{children:"otelcol-contrib_"})," and find the appropriate one for your os platform. For example, the one for Ubuntu running on 64-bit ARM processors will be named like ",(0,o.jsx)(n.code,{children:"otelcol-contrib_xxx_linux_arm64.deb"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["There are two variants of OTel Collector available - ",(0,o.jsx)(n.strong,{children:"core"})," (names starting with ",(0,o.jsx)(n.code,{children:"otelcol_"}),") and ",(0,o.jsx)(n.strong,{children:"contrib"})," (names starting with ",(0,o.jsx)(n.code,{children:"otelcol-contrib_"}),"). The core variant is bare-bones, while the contrib variant has a number of additional modules. Infra monitoring makes use of many of these additional modules, and hence needs the contrib variant."]})}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(n.p,{children:"Here we show the installation steps for Ubuntu. Steps for other linux variants are similar. (See the bottom of this section for installation on Windows)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"# change the link to the appropriate link for your os, cpu architecture, collector version, etc.\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v0.116.1/otelcol-contrib_0.116.1_linux_arm64.deb\n\ndpkg -i otelcol-contrib_0.116.1_linux_arm64.deb\n\n# the package file can now be removed\n# rm otelcol-contrib_0.116.1_linux_arm64.deb\n\n# edit the config as desired (refer the configuration section below)\nvi /etc/otelcol-contrib/config.yaml\n\n# restart collector service\nsystemctl restart otelcol-contrib.service\nsystemctl status otelcol-contrib.service\n"})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Installation on Windows"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Download the appropriate ",(0,o.jsx)(n.code,{children:".tar.gz"})," file for windows platform."]}),"\n",(0,o.jsxs)(n.li,{children:["Unzip it by executing ",(0,o.jsx)(n.code,{children:"tar -xzf <filename>"})," command in powershell."]}),"\n",(0,o.jsx)(n.li,{children:"Update config.yaml as desired (refer the configuration section below)."}),"\n",(0,o.jsxs)(n.li,{children:["Run the Collector by executing ",(0,o.jsx)(n.code,{children:"otelcol-contrib.exe --config config.yaml"})," in powershell."]}),"\n"]}),(0,o.jsx)(n.p,{children:"The Collector can be set up as a background service as follows:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'# Create windows service.\n# Modify the paths of otelcol-contrib.exe and config.yaml as appropriate.\n# Ref: https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/sc-create\nsc.exe create otelcol displayname= otelcol start= delayed-auto binPath= "C:\\Users\\Administrator\\Desktop\\otelcol-contrib\\otelcol-contrib.exe --config C:\\Users\\Administrator\\Desktop\\otelcol-contrib\\config.yaml"\n\n# Useful commands\nsc.exe start otelcol\nsc.exe query otelcol\nsc.exe delete otelcol\n\n# To check the logs, open event viewer > windows logs > application,\n# and then filter source=otelcol on right hand side.\n'})})]}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Here's a sample OTel Collector configuration file for infra monitoring."}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"config.yaml"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'# Individual infra agents are configured in the receivers section below.\n# The list of available agents and their documentation is available at\n# https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver\nreceivers:\n  # hostmetrics monitors host machines (bare metal, ec2, etc.)\n  # It collects metrics for CPU, memory, etc. on the host\n  # where the collector is running.\n  hostmetrics:\n    collection_interval: 60s\n    scrapers:\n      cpu:\n      disk:\n      # load:\n      filesystem:\n      memory:\n      network:\n      # paging:\n      # processes:\n      # process:\n      #   mute_process_all_errors: true\n\n  redis:\n    endpoint: localhost:6379\n    collection_interval: 60s\n    resource_attributes:\n      server.address:\n        enabled: true\n    metrics:\n      redis.cmd.calls:\n        enabled: true\n\n  memcached:\n    endpoint: localhost:11211\n    transport: tcp\n    collection_interval: 60s\n\n  mysql:\n    endpoint: localhost:3306\n    username: cubeapm\n    password: mypassword\n    collection_interval: 60s\n    metrics:\n      mysql.commands:\n        enabled: true\n      mysql.connection.count:\n        enabled: true\n      mysql.connection.errors:\n        enabled: true\n      mysql.query.count:\n        enabled: true\n      mysql.query.slow.count:\n        enabled: true\n      mysql.joins:\n        enabled: true\n      mysql.replica.sql_delay:\n        enabled: true\n      mysql.replica.time_behind_source:\n        enabled: true\n      mysql.index.io.wait.time:\n        enabled: false\n      mysql.index.io.wait.count:\n        enabled: false\n      mysql.table.io.wait.time:\n        enabled: false\n      mysql.table.io.wait.count:\n        enabled: false\n\n  postgresql:\n    endpoint: localhost:5432\n    transport: tcp\n    username: cubeapm\n    password: mypassword\n    # databases:\n    #   - otel\n    # exclude_databases:\n    #   - rdsadmin\n    collection_interval: 60s\n    tls:\n      insecure: true\n\n  mongodb:\n    hosts:\n      - endpoint: localhost:27017\n    # username: cubeapm\n    # password: mypassword\n    collection_interval: 60s\n    tls:\n      insecure: true\n      # ca_file: /etc/otelcol-contrib/global-bundle.pem\n\n  nginx:\n    endpoint: http://localhost:80/status\n    collection_interval: 60s\n\nprocessors:\n  batch:\n\n  resourcedetection:\n    detectors:\n      - system\n    system:\n      hostname_sources: ["os"]\n\n  # resource/cube.environment:\n  #   attributes:\n  #     - key: cube.environment\n  #       value: UNSET\n  #       action: upsert\n\nexporters:\n  debug:\n    verbosity: detailed\n    sampling_initial: 5\n    sampling_thereafter: 1\n\n  otlphttp:\n    metrics_endpoint: http://<cubeapm_endpoint>:3130/api/metrics/v1/save/otlp\n    retry_on_failure:\n      enabled: false\n\nservice:\n  pipelines:\n    metrics:\n      receivers:\n        # Individual infra monitoring agents can be disabled\n        # by commenting them out here.\n        - hostmetrics\n        # - redis\n        # - memcached\n        # - mysql\n        # - postgresql\n        # - mongodb\n        # - nginx\n      processors:\n        - batch\n        - resourcedetection\n        # - resource/cube.environment\n      exporters:\n        - otlphttp\n        # - debug\n\n  telemetry:\n    logs:\n      level: info\n    metrics:\n      readers:\n        - pull:\n            exporter:\n              prometheus:\n                host: "localhost"\n                port: 8888\n'})})]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var o=t(6540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);