"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[195],{3530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"instrumentation/opentelemetry/javascript-browser","title":"JavaScript (browser)","description":"Installation","source":"@site/docs/instrumentation/opentelemetry/browser.md","sourceDirName":"instrumentation/opentelemetry","slug":"/instrumentation/opentelemetry/javascript-browser","permalink":"/instrumentation/opentelemetry/javascript-browser","draft":false,"unlisted":false,"editUrl":"https://github.com/cubeapm/docs/docs/docs/instrumentation/opentelemetry/browser.md","tags":[],"version":"current","frontMatter":{"id":"javascript-browser","title":"JavaScript (browser)","slug":"/instrumentation/opentelemetry/javascript-browser"},"sidebar":"tutorialSidebar","previous":{"title":"OpenTelemetry","permalink":"/instrumentation/opentelemetry"},"next":{"title":".NET Core","permalink":"/instrumentation/opentelemetry/dotnet"}}');var o=n(4848),s=n(8453);const a={id:"javascript-browser",title:"JavaScript (browser)",slug:"/instrumentation/opentelemetry/javascript-browser"},i=void 0,c={},l=[{value:"Installation",id:"installation",level:2}];function p(e){const t={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Install dependencies"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"npm install \\\n@opentelemetry/api \\\n@opentelemetry/auto-instrumentations-web \\\n@opentelemetry/context-zone \\\n@opentelemetry/core \\\n@opentelemetry/exporter-trace-otlp-proto \\\n@opentelemetry/instrumentation \\\n@opentelemetry/resources \\\n@opentelemetry/sdk-trace-web \\\n@opentelemetry/semantic-conventions\n"})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Add the following into your web project's main file:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",children:'import { diag, DiagConsoleLogger, DiagLogLevel } from "@opentelemetry/api";\nimport { getWebAutoInstrumentations } from "@opentelemetry/auto-instrumentations-web";\nimport { ZoneContextManager } from "@opentelemetry/context-zone";\nimport { W3CTraceContextPropagator } from "@opentelemetry/core";\nimport { OTLPTraceExporter } from "@opentelemetry/exporter-trace-otlp-proto";\nimport { registerInstrumentations } from "@opentelemetry/instrumentation";\nimport { Resource } from "@opentelemetry/resources";\nimport {\n  BatchSpanProcessor,\n  ConsoleSpanExporter,\n  SimpleSpanProcessor,\n  WebTracerProvider,\n} from "@opentelemetry/sdk-trace-web";\nimport { SemanticResourceAttributes } from "@opentelemetry/semantic-conventions";\n\nconst CUBE_DEBUG = false;\nconst CUBE_SERVICE_NAME = "cubeapm-web";\nconst CUBE_EXPORTER_OTLP_TRACES_ENDPOINT = "http://localhost:4318/v1/traces";\nconst CUBE_PROPAGATE_TRACE_HEADER_CORS_URLS = [/^http:\\/\\/localhost:8080\\//];\n\nif (CUBE_DEBUG) {\n  diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);\n}\n\nconst provider = new WebTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: CUBE_SERVICE_NAME,\n  }),\n});\nif (CUBE_DEBUG) {\n  provider.addSpanProcessor(\n    new SimpleSpanProcessor(new ConsoleSpanExporter())\n  );\n} else {\n  provider.addSpanProcessor(\n    new BatchSpanProcessor(\n      new OTLPTraceExporter({\n        url: CUBE_EXPORTER_OTLP_TRACES_ENDPOINT,\n      })\n    )\n  );\n}\nprovider.register({\n  contextManager: new ZoneContextManager(),\n  propagator: new W3CTraceContextPropagator(),\n});\nregisterInstrumentations({\n  instrumentations: getWebAutoInstrumentations({\n    "@opentelemetry/instrumentation-user-interaction": {\n      enabled: false,\n    },\n    "@opentelemetry/instrumentation-fetch": {\n      propagateTraceHeaderCorsUrls: CUBE_PROPAGATE_TRACE_HEADER_CORS_URLS,\n    },\n    "@opentelemetry/instrumentation-xml-http-request": {\n      propagateTraceHeaderCorsUrls: CUBE_PROPAGATE_TRACE_HEADER_CORS_URLS,\n    },\n  }),\n});\n\n// Your code starts here\nReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n    </Provider>\n  </React.StrictMode>\n);\n'})}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(6540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);