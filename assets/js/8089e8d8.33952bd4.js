"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5265],{6365:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"instrumentation/opentelemetry/go-gin","title":"Go Gin","description":"Prerequisites","source":"@site/docs/instrumentation/opentelemetry/go-gin.md","sourceDirName":"instrumentation/opentelemetry","slug":"/instrumentation/opentelemetry/go-gin","permalink":"/instrumentation/opentelemetry/go-gin","draft":false,"unlisted":false,"editUrl":"https://github.com/cubeapm/docs/docs/docs/instrumentation/opentelemetry/go-gin.md","tags":[],"version":"current","frontMatter":{"id":"go-gin","title":"Go Gin","slug":"/instrumentation/opentelemetry/go-gin"},"sidebar":"tutorialSidebar","previous":{"title":".NET Core","permalink":"/instrumentation/opentelemetry/dotnet"},"next":{"title":"Go Net/HTTP","permalink":"/instrumentation/opentelemetry/go-net-http"}}');var o=n(4848),i=n(8453);const s={id:"go-gin",title:"Go Gin",slug:"/instrumentation/opentelemetry/go-gin"},a=void 0,l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Sample App",id:"sample-app",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(t.p,{children:"Go 1.23+"}),"\n",(0,o.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Create a file ",(0,o.jsx)(t.code,{children:"otel.go"})," in your project directory with the following content:"]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"otel.go"}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:' package main\n\n import (\n     "context"\n     "errors"\n     "os"\n     "time"\n\n     "go.opentelemetry.io/contrib/instrumentation/host"\n     "go.opentelemetry.io/contrib/instrumentation/runtime"\n     "go.opentelemetry.io/otel"\n     "go.opentelemetry.io/otel/attribute"\n     "go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp"\n     "go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp"\n     "go.opentelemetry.io/otel/exporters/stdout/stdoutmetric"\n     "go.opentelemetry.io/otel/exporters/stdout/stdouttrace"\n     "go.opentelemetry.io/otel/propagation"\n     "go.opentelemetry.io/otel/sdk/metric"\n     "go.opentelemetry.io/otel/sdk/resource"\n     "go.opentelemetry.io/otel/sdk/trace"\n     semconv "go.opentelemetry.io/otel/semconv/v1.34.0"\n )\n\n // setupOTelSDK bootstraps the OpenTelemetry pipeline.\n // If it does not return an error, make sure to call shutdown for proper cleanup.\n func setupOTelSDK(ctx context.Context) (shutdown func(context.Context) error, err error) {\n     var shutdownFuncs []func(context.Context) error\n\n     // shutdown calls cleanup functions registered via shutdownFuncs.\n     // The errors from the calls are joined.\n     // Each registered cleanup will be invoked once.\n     shutdown = func(ctx context.Context) error {\n \t    var err error\n \t    for _, fn := range shutdownFuncs {\n \t\t    err = errors.Join(err, fn(ctx))\n \t    }\n \t    shutdownFuncs = nil\n \t    return err\n     }\n\n     // handleErr calls shutdown for cleanup and makes sure that all errors are returned.\n     handleErr := func(inErr error) {\n \t    err = errors.Join(inErr, shutdown(ctx))\n     }\n\n     // Set up propagator.\n     prop := newPropagator()\n     otel.SetTextMapPropagator(prop)\n\n     hostname, _ := os.Hostname()\n     res := resource.Default()\n     res = resource.NewWithAttributes(\n \t    res.SchemaURL(),\n \t    append(res.Attributes(), attribute.KeyValue{\n \t\t    Key:   semconv.HostNameKey,\n \t\t    Value: attribute.StringValue(hostname),\n \t    })...,\n     )\n\n     // Set up trace provider.\n     tracerProvider, err := newTraceProvider(ctx, res)\n     if err != nil {\n \t    handleErr(err)\n \t    return\n     }\n     shutdownFuncs = append(shutdownFuncs, tracerProvider.Shutdown)\n     otel.SetTracerProvider(tracerProvider)\n\n     // Set up meter provider.\n     meterProvider, err := newMeterProvider(ctx, res)\n     if err != nil {\n \t    handleErr(err)\n \t    return\n     }\n     shutdownFuncs = append(shutdownFuncs, meterProvider.Shutdown)\n     otel.SetMeterProvider(meterProvider)\n\n     err = host.Start()\n     if err != nil {\n \t    handleErr(err)\n \t    return\n     }\n     // enable deprecated runtime metrics to get garbage collection details\n     os.Setenv("OTEL_GO_X_DEPRECATED_RUNTIME_METRICS", "true")\n     err = runtime.Start(runtime.WithMeterProvider(meterProvider))\n     if err != nil {\n \t    handleErr(err)\n \t    return\n     }\n\n     return\n }\n\n func newPropagator() propagation.TextMapPropagator {\n     return propagation.NewCompositeTextMapPropagator(\n \t    propagation.TraceContext{},\n \t    propagation.Baggage{},\n     )\n }\n\n func newTraceProvider(ctx context.Context, res *resource.Resource) (*trace.TracerProvider, error) {\n     var traceExporter trace.SpanExporter\n     var err error\n     if os.Getenv("OTEL_LOG_LEVEL") == "debug" {\n \t    traceExporter, err = stdouttrace.New(\n \t\t    stdouttrace.WithPrettyPrint(),\n \t    )\n     } else {\n \t    traceExporter, err = otlptracehttp.New(ctx)\n     }\n     if err != nil {\n \t    return nil, err\n     }\n\n     traceProvider := trace.NewTracerProvider(\n \t    trace.WithResource(res),\n \t    trace.WithBatcher(traceExporter),\n     )\n     return traceProvider, nil\n }\n\n func newMeterProvider(ctx context.Context, res *resource.Resource) (*metric.MeterProvider, error) {\n     var metricExporter metric.Exporter\n     var err error\n     var opts []metric.PeriodicReaderOption\n     if os.Getenv("OTEL_LOG_LEVEL") == "debug" {\n \t    metricExporter, err = stdoutmetric.New(\n \t\t    stdoutmetric.WithPrettyPrint(),\n \t    )\n \t    // Default is 1m. Set to 10s to get output faster.\n \t    opts = append(opts, metric.WithInterval(10*time.Second))\n     } else {\n \t    metricExporter, err = otlpmetrichttp.New(ctx)\n     }\n     if err != nil {\n \t    return nil, err\n     }\n\n     meterProvider := metric.NewMeterProvider(\n \t    metric.WithResource(res),\n \t    metric.WithReader(\n \t\t    metric.NewPeriodicReader(metricExporter, opts...),\n \t    ),\n     )\n     return meterProvider, nil\n }\n'})})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Add the highlighted lines below to your project's ",(0,o.jsx)(t.code,{children:"main.go"})," file:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\n\n# highlight-start\nimport "go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin"\n# highlight-end\n\nfunc main() {\n    ......\n    # highlight-start\n    // Handle SIGINT (CTRL+C)\n    ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)\n    defer stop()\n\n    // Set up OpenTelemetry.\n    otelShutdown, err := setupOTelSDK(ctx)\n    if err != nil {\n    \treturn err\n    }\n    // Handle shutdown properly so nothing leaks.\n    defer func() {\n    \terr = errors.Join(err, otelShutdown(context.Background()))\n    }()\n    # highlight-end\n\n    r := gin.Default()\n    # highlight-start\n    router.Use(otelgin.Middleware(os.Getenv("OTEL_SERVICE_NAME")))\n    # highlight-end\n    ......\n}\n'})}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["For more information, refer to the ",(0,o.jsx)(t.a,{href:"https://opentelemetry.io/docs/languages/go/getting-started/",children:"OpenTelemetry Go documentation"}),"."]})}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Modify the application run command as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"OTEL_LOGS_EXPORTER=none \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://<ip_address_of_cubeapm_server>:4318/v1/traces \\\nOTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://<ip_address_of_cubeapm_server>:3130/api/metrics/v1/save/otlp \\\nOTEL_EXPORTER_OTLP_COMPRESSION=gzip \\\nOTEL_SERVICE_NAME=<app_name> \\\ngo run main.go\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"sample-app",children:"Sample App"}),"\n",(0,o.jsxs)(t.p,{children:["A working example with multiple instrumentations is available at ",(0,o.jsx)(t.a,{href:"https://github.com/cubeapm/sample_app_go_gin/tree/otel",children:"https://github.com/cubeapm/sample_app_go_gin/tree/otel"})]}),"\n",(0,o.jsx)(t.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsx)(t.p,{children:"The following can be used for debugging:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"# print traces and metrics on console\nOTEL_LOG_LEVEL=debug\n"})}),"\n",(0,o.jsx)(t.p,{children:"The following command can be tried on the application host server to check connectivity to CubeAPM server(s):"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-shell",children:"telnet <ip_address_of_cubeapm_server> 4318\n"})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);