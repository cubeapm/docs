"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1255],{8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>r});var t=a(6540);const o={},s=t.createContext(o);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(s.Provider,{value:n},e.children)}},9417:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"logs/ingestion/aws-lambda","title":"AWS Lambda","description":"AWS Lambda can send logs to external services using lambda extension layers. CubeAPM supports collecting logs via lambda layers of various providers, as detailed below.","source":"@site/docs/logs/ingestion/aws-lambda.md","sourceDirName":"logs/ingestion","slug":"/logs/ingestion/aws-lambda","permalink":"/logs/ingestion/aws-lambda","draft":false,"unlisted":false,"editUrl":"https://github.com/cubeapm/docs/docs/docs/logs/ingestion/aws-lambda.md","tags":[],"version":"current","frontMatter":{"id":"aws-lambda","title":"AWS Lambda","slug":"/logs/ingestion/aws-lambda"},"sidebar":"tutorialSidebar","previous":{"title":"AWS Firehose","permalink":"/logs/ingestion/aws-firehose"},"next":{"title":"AWS S3","permalink":"/logs/ingestion/aws-s3"}}');var o=a(4848),s=a(8453);const l={id:"aws-lambda",title:"AWS Lambda",slug:"/logs/ingestion/aws-lambda"},r="AWS Lambda",i={},d=[{value:"OpenTelemetry",id:"opentelemetry",level:2},{value:"New Relic",id:"new-relic",level:2},{value:"Datadog",id:"datadog",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"aws-lambda",children:"AWS Lambda"})}),"\n",(0,o.jsx)(n.p,{children:"AWS Lambda can send logs to external services using lambda extension layers. CubeAPM supports collecting logs via lambda layers of various providers, as detailed below."}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The lambda will ",(0,o.jsx)(n.strong,{children:"NOT"})," stop sending logs to AWS Cloudwatch after the below integrations. Unfortunately, AWS does not provide an official way to stop sending lambda logs to Cloudwatch. A practical workaround is to modify your lambda's IAM permissions to deny the permission to send logs to Cloudwatch, as described here - ",(0,o.jsx)(n.a,{href:"https://stackoverflow.com/a/59665261",children:"https://stackoverflow.com/a/59665261"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"opentelemetry",children:"OpenTelemetry"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["(Optional - required for traces but not for logs) Visit ",(0,o.jsx)(n.a,{href:"https://github.com/open-telemetry/opentelemetry-lambda/releases",children:"https://github.com/open-telemetry/opentelemetry-lambda/releases"}),", and copy the ARN of the layer corresponding to the language in which your lambda is implemented. Fill in the appropriate values for parameters in ",(0,o.jsx)(n.code,{children:"< >"})," to get the actual ARN. Add this ARN as a layer to your lambda."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:['From the same URL above, copy the ARN of the "layer-collector". Fill in the appropriate values for parameters in ',(0,o.jsx)(n.code,{children:"< >"})," to get the actual ARN. Add this ARN as well as a layer to your lambda."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Add the below file to the root of your lambda function code and deploy the updated code."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="collector.yaml"',children:"receivers:\n  telemetryapi:\nexporters:\n  debug:\n    verbosity: detailed\n    sampling_initial: 5\n    sampling_thereafter: 1\n  otlphttp/logs:\n    logs_endpoint: http://<cubeapm_endpoint>:3130/api/logs/insert/opentelemetry/v1/logs\n    headers:\n      Cube-Stream-Fields: service.name\n  otlphttp/traces:\n    traces_endpoint: http://<cubeapm_endpoint>:4318/v1/traces\nprocessors:\n  batch:\n  decouple:\nservice:\n  pipelines:\n    traces:\n      receivers: [telemetryapi]\n      processors: [batch, decouple]\n      exporters:\n        # - debug\n        - otlphttp/traces\n    logs:\n      receivers: [telemetryapi]\n      processors: [batch, decouple]\n      exporters:\n        # - debug\n        - otlphttp/logs\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Add the below environment variables to your lambda."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"# uncomment following line if traces instrumentation layer (as described in Step 1 above) is added.\n# AWS_LAMBDA_EXEC_WRAPPER=/opt/otel-handler\nOPENTELEMETRY_COLLECTOR_CONFIG_URI=/var/task/collector.yaml\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Lambda logs should now be visible in CubeAPM."}),"\n",(0,o.jsxs)(n.p,{children:["Ref: ",(0,o.jsx)(n.a,{href:"https://opentelemetry.io/blog/2025/observing-lambdas/",children:"https://opentelemetry.io/blog/2025/observing-lambdas/"})]}),"\n",(0,o.jsx)(n.h2,{id:"new-relic",children:"New Relic"}),"\n",(0,o.jsx)(n.p,{children:"If your lambda is instrumented using New Relic lambda layer, you can send the logs to CubeAPM by adding the below environment variables to your lambda."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:'NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS=true\nNEW_RELIC_LOG_ENDPOINT=https://<domain_of_cubeapm_server_forwarding_to_port_3130>/api/logs/insert/newrelic/api/v1/lambda\n\n# optional\n# NEW_RELIC_EXTENSION_SEND_EXTENSION_LOGS=true\n# NR_TAGS="key1:value1;key2:value2"\n\n# Check the README below for steps to add New Relic lambda,\n# and also for more configuration options:\n# https://github.com/newrelic/newrelic-lambda-extension?tab=readme-ov-file#newrelic-lambda-extension--\n'})}),"\n",(0,o.jsx)(n.p,{children:"Lambda logs should now be visible in CubeAPM."}),"\n",(0,o.jsx)(n.h2,{id:"datadog",children:"Datadog"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Visit ",(0,o.jsx)(n.a,{href:"https://github.com/DataDog/serverless-plugin-datadog/blob/main/src/layers.json",children:"https://github.com/DataDog/serverless-plugin-datadog/blob/main/src/layers.json"}),', and copy the ARN of the "extension" (or "extension-arm" if your lambda runs on ARM64 architecture) from the appropriate AWS region.']}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Add the ARN (copied above) as a layer to your lambda."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Add the below environment variables to your lambda."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"DD_API_KEY=random\nDD_URL=http://<ip_address_of_cubeapm_server>:3130\nDD_LOGS_ENABLED=true\nDD_LOGS_CONFIG_FORCE_USE_HTTP=true\nDD_LOGS_CONFIG_LOGS_DD_URL=<ip_address_of_cubeapm_server>:3130\nDD_LOGS_CONFIG_LOGS_NO_SSL=true\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Lambda logs should now be visible in CubeAPM."}),"\n",(0,o.jsx)(n.p,{children:"For advanced configuration, using a configuration file is supported (note that environment variable settings override the value from the configuration file). You only need to create a datadog.yaml file in the root of your lambda function."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);