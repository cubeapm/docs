"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2440],{404:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"instrumentation/newrelic/php-slim","title":"PHP Slim","description":"Prerequisites","source":"@site/docs/instrumentation/newrelic/php-slim.md","sourceDirName":"instrumentation/newrelic","slug":"/instrumentation/newrelic/php-slim","permalink":"/instrumentation/newrelic/php-slim","draft":false,"unlisted":false,"editUrl":"https://github.com/cubeapm/docs/docs/docs/instrumentation/newrelic/php-slim.md","tags":[],"version":"current","frontMatter":{"id":"php-slim","title":"PHP Slim","slug":"/instrumentation/newrelic/php-slim"},"sidebar":"tutorialSidebar","previous":{"title":"PHP Laravel","permalink":"/instrumentation/newrelic/php-laravel"},"next":{"title":"Python Django Gunicorn","permalink":"/instrumentation/newrelic/python-django-gunicorn"}}');var l=i(4848),o=i(8453),t=i(9005);const s={id:"php-slim",title:"PHP Slim",slug:"/instrumentation/newrelic/php-slim"},c=void 0,a={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},...t.RM,{value:"Sample App",id:"sample-app",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,l.jsx)(n.p,{children:"New Relic PHP agent version >= 10.0.0"}),"\n",(0,l.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsx)(n.p,{children:"Following are the steps to install the New Relic agent and connect it with CubeAPM. If New Relic agent is already installed, you can jump to step 3."}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Follow this link to install New Relic agent: ",(0,l.jsx)(n.a,{href:"https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-overview",children:"https://docs.newrelic.com/docs/apm/agents/php-agent/installation/php-agent-installation-overview"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["Configure the agent (the config file is generally available at ",(0,l.jsx)(n.code,{children:"/etc/php/<php_version>/mods-available/newrelic.ini"}),")."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ini",metastring:'title="newrelic.ini"',children:"newrelic.license = ABC4567890ABC4567890ABC4567890ABC4567890\nnewrelic.appname = <app_name>\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(t.Ay,{}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Tell the agent to connect with CubeAPM instead of New Relic:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ini",metastring:'title="newrelic.ini"',children:"; Use your load balancer's domain name here\nnewrelic.daemon.collector_host = <cubeapm-newrelic.yourdomain.com>\n\n; remove irrelevant spans from traces (optional but highly recommended)\nnewrelic.transaction_tracer.detail = 0\n\n; don't report E_WARNING as errors (optional)\nnewrelic.error_collector.ignore_errors = E_WARNING\n"})}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"sample-app",children:"Sample App"}),"\n",(0,l.jsxs)(n.p,{children:["A working example is available at ",(0,l.jsx)(n.a,{href:"https://github.com/cubeapm/sample_app_php_slim/tree/newrelic",children:"https://github.com/cubeapm/sample_app_php_slim/tree/newrelic"})]}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(n.p,{children:"The following can be used for troubleshooting:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ini",metastring:'title="newrelic.ini"',children:"newrelic.loglevel = debug\n; newrelic.logfile = /var/log/newrelic/php_agent.log\n\nnewrelic.daemon.loglevel = debug\n; newrelic.daemon.logfile = /var/log/newrelic/newrelic-daemon.log\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(p,{...e})}):p(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>s});var r=i(6540);const l={},o=r.createContext(l);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),r.createElement(o.Provider,{value:n},e.children)}},9005:(e,n,i)=>{i.d(n,{Ay:()=>s,RM:()=>o});var r=i(4848),l=i(8453);const o=[];function t(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Set up a proxy for New Relic agent."}),"\n",(0,r.jsx)(n.p,{children:"New Relic agent has a limitation: it only send data over HTTPS on port 443. However, CubeAPM receives data on port 3130 over HTTP. To bridge this gap, you need to set up a proxy (load balancer or HTTP reverse proxy) that:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Accepts HTTPS traffic on port 443 from the New Relic agent"}),"\n",(0,r.jsx)(n.li,{children:"Forwards this traffic to your CubeAPM server on port 3130 over HTTP"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For example, you can set up an AWS Application Load Balancer (ALB) with the following configuration:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Listener Configuration:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Protocol: HTTPS"}),"\n",(0,r.jsx)(n.li,{children:"Port: 443"}),"\n",(0,r.jsxs)(n.li,{children:["Domain name: ",(0,r.jsx)(n.code,{children:"cubeapm-newrelic.yourdomain.com"})," (example domain for your load balancer)"]}),"\n",(0,r.jsxs)(n.li,{children:["SSL/TLS Certificate: Certificate for ",(0,r.jsx)(n.code,{children:"cubeapm-newrelic.yourdomain.com"})," or ",(0,r.jsx)(n.code,{children:"\\*.yourdomain.com"})," (from ACM or imported)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Target Group Configuration:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Protocol: HTTP"}),"\n",(0,r.jsx)(n.li,{children:"Port: 3130"}),"\n",(0,r.jsxs)(n.li,{children:["Target: Your CubeAPM server IP or DNS name (e.g., ",(0,r.jsx)(n.code,{children:"cubeapm-server.yourdomain.com"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Health check path: ",(0,r.jsx)(n.code,{children:"/health"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Security Groups:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Load Balancer Security Group:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inbound rule: Allow HTTPS (port 443) from your application servers' IPs or security groups"}),"\n",(0,r.jsx)(n.li,{children:"Outbound rule: Allow HTTP (port 3130) to the CubeAPM server's IP or security group"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"CubeAPM Server Security Group:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inbound rule: Allow HTTP (port 3130) from the load balancer's security group"}),"\n",(0,r.jsx)(n.li,{children:"Outbound rule: Allow all traffic (or as per your security requirements)"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The New Relic agent will connect to the load balancer's domain name (",(0,r.jsx)(n.code,{children:"cubeapm-newrelic.yourdomain.com"})," in this example), which will then forward the traffic to your CubeAPM server on port 3130."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["For more details on proxy setup options, refer to the ",(0,r.jsx)(n.a,{href:"https://docs.cubeapm.com/instrumentation/newrelic",children:"New Relic integration documentation"}),"."]})})]})}function s(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}}}]);